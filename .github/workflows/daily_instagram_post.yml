# .github/workflows/daily_instagram_post.yml
# Automates daily Instagram posts from Dental Daily Brief

name: Daily Instagram Post

on:
  schedule:
    # Run daily at 9 AM EST (14:00 UTC)
    - cron: '0 14 * * *'
  
  # Allow manual trigger
  workflow_dispatch:

jobs:
  post_to_instagram:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests Pillow cloudinary
      
      - name: Fetch stories from API
        run: |
          python << 'EOF'
          import requests
          import json
          
          # Fetch from your Dental Daily Brief API
          response = requests.get('https://dentaldailybrief.com/api/stories')
          data = response.json()
          
          # Load already posted stories
          try:
              with open('posted_stories.json', 'r') as f:
                  posted_data = json.load(f)
                  posted_urls = set(posted_data.get('posted_urls', []))
          except:
              posted_urls = set()
          
          # Filter out already posted stories
          new_stories = []
          for story in data['stories']:
              if story['url'] not in posted_urls:
                  new_stories.append(story)
          
          # Save new stories to process
          with open('new_stories.json', 'w') as f:
              json.dump(new_stories, f)
          
          print(f"Found {len(new_stories)} new stories to post")
          EOF
      
      - name: Generate images and post to Instagram
        env:
          INSTAGRAM_ACCESS_TOKEN: ${{ secrets.INSTAGRAM_ACCESS_TOKEN }}
          INSTAGRAM_ACCOUNT_ID: ${{ secrets.INSTAGRAM_ACCOUNT_ID }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
        run: |
          python << 'EOF'
          import json
          import time
          from instagram_image_generator import InstagramImageGenerator
          from instagram_poster_cloudinary import post_story_to_instagram
          
          # Load new stories
          with open('new_stories.json', 'r') as f:
              new_stories = json.load(f)
          
          if not new_stories:
              print("No new stories to post")
              exit(0)
          
          # Load posted stories tracking
          try:
              with open('posted_stories.json', 'r') as f:
                  posted_data = json.load(f)
          except:
              posted_data = {'posted_urls': [], 'last_updated': ''}
          
          posted_urls = posted_data.get('posted_urls', [])
          
          # Generate images and post each story
          generator = InstagramImageGenerator()
          successful_posts = 0
          
          for story in new_stories:
              print(f"\n{'='*60}")
              print(f"Processing: {story['title'][:50]}...")
              print(f"{'='*60}")
              
              # Generate image
              image_path = generator.generate_image(story)
              
              # Post to Instagram
              post_id = post_story_to_instagram(story, image_path)
              
              if post_id:
                  # Mark as posted
                  posted_urls.append(story['url'])
                  successful_posts += 1
                  print(f"✅ Successfully posted story {successful_posts}")
              else:
                  print(f"❌ Failed to post story")
              
              # Wait between posts (Instagram rate limiting)
              if successful_posts < len(new_stories):
                  print("Waiting 30 seconds before next post...")
                  time.sleep(30)
          
          # Update tracking file
          from datetime import datetime
          posted_data['posted_urls'] = posted_urls
          posted_data['last_updated'] = datetime.now().isoformat()
          
          with open('posted_stories.json', 'w') as f:
              json.dump(posted_data, f, indent=2)
          
          print(f"\n{'='*60}")
          print(f"✅ AUTOMATION COMPLETE!")
          print(f"{'='*60}")
          print(f"Posted {successful_posts} out of {len(new_stories)} stories")
          EOF
      
      - name: Commit updated tracking file
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add posted_stories.json
          git diff --quiet && git diff --staged --quiet || git commit -m "Update posted stories tracking"
          git push
      
      - name: Upload images as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: instagram-images-${{ github.run_number }}
          path: instagram_images/
          retention-days: 7
